from datetime import timedelta

from aiogram import Router, F
from aiogram.enums.parse_mode import ParseMode
from aiogram.filters.state import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from sqlalchemy import select

from db.db_engine import async_session
from db.db_models import UserConfList, WgConfList
from keyboards.extend_my_services.extend_vpn import get_personal_services_to_extend_keyboard
from keyboards.extend_my_services.extension_options import select_extension_keyboard
from bot import bot
from states.extend_state import ExtendVPNState

router = Router()

TARIFFS = {
    "ext_1_month": ("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ WireGuard –Ω–∞ 1 –º–µ—Å—è—Ü", 99),
    "ext_2_months": ("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ WireGuard –Ω–∞ 2 –º–µ—Å—è—Ü–∞", 139),
    "ext_3_months": ("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ WireGuard –Ω–∞ 3 –º–µ—Å—è—Ü–∞", 179),
    "ext_6_months": ("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ WireGuard –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", 279),
    "ext_1_year": ("–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ WireGuard –Ω–∞ 1 –≥–æ–¥", 539),
}


@router.message(F.text == 'üåê –ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É')
async def get_personal_services_to_extend(message: Message, state: FSMContext):
    async with async_session() as session:
        services = (await session.execute(
            select(
                WgConfList.conf_id
            )
            .join(UserConfList, UserConfList.conf_id == WgConfList.conf_id)
            .where(UserConfList.user_id == message.from_user.id)
        )).all()
    if len(services) < 1:
        return await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥!")
    kb = await get_personal_services_to_extend_keyboard(services)

    await state.set_state(ExtendVPNState.choosing_service)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫–æ—Ç–æ—Ä—É—é –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å!", parse_mode=ParseMode.HTML, reply_markup=kb)


@router.callback_query(StateFilter(ExtendVPNState.choosing_service), F.data.startswith("renew_"))
async def extend_service(callback: CallbackQuery, state: FSMContext):
    await state.update_data(service_id=callback.data.replace("renew_", ""))
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–æ–¥–ª–µ–Ω–∏—è", reply_markup=select_extension_keyboard)
    await state.set_state(ExtendVPNState.choosing_tariff)


@router.callback_query(StateFilter(ExtendVPNState.choosing_tariff), F.data.startswith("ext_"))
async def receive_tariff(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã VPN (–ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ)"""

    user_data = await state.get_data()
    service_id = user_data.get("service_id")

    if not service_id:
        return await callback.message.answer("–û—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    title, price = TARIFFS[callback.data]
    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏",
        description=f"{title}. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª .conf –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã WireGuard.",
        payload=callback.data,
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏", amount=price)],
    )

    await state.set_state(ExtendVPNState.waiting_payment)


@router.pre_checkout_query(StateFilter(ExtendVPNState.waiting_payment), F.invoice_payload.startswith("ext_"))
async def process_renew_service_payment(pre_checkout_query: PreCheckoutQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π –ø—Ä–æ–¥–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    await state.set_state(ExtendVPNState.success_payment)
