from datetime import timedelta
from aiogram.filters.state import StateFilter
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, LabeledPrice, PreCheckoutQuery
from sqlalchemy import select, update

from commands.manage_config import ManageWireGuardConfig
from db.db_engine import async_session
from db.db_models import UserList, WgConfList
from bot import bot
from states.buying_state import BuyVPNState

router = Router()

# üîπ –¢–∞—Ä–∏—Ñ–Ω—ã–µ –ø–ª–∞–Ω—ã
TARIFFS = {
    "new_1_month": ("–î–æ—Å—Ç—É–ø –∫ WireGuard –Ω–∞ 1 –º–µ—Å—è—Ü", 99),
    "new_2_months": ("–î–æ—Å—Ç—É–ø –∫ WireGuard –Ω–∞ 2 –º–µ—Å—è—Ü–∞", 139),
    "new_3_months": ("–î–æ—Å—Ç—É–ø –∫ WireGuard –Ω–∞ 3 –º–µ—Å—è—Ü–∞", 179),
    "new_6_months": ("–î–æ—Å—Ç—É–ø –∫ WireGuard –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤", 279),
    "new_1_year": ("–î–æ—Å—Ç—É–ø –∫ WireGuard –Ω–∞ 1 –≥–æ–¥", 539),
}


@router.callback_query(F.data == "demo")
async def receive_demo_tariff(callback: CallbackQuery):
    """–í—ã–¥–∞—Ç—å –¥–µ–º–æ-–≤–µ—Ä—Å–∏—é VPN"""
    async with async_session() as session:
        res = await session.scalar(select(UserList).where(UserList.user_id == callback.message.chat.id))

        if res and res.used_demo:
            return await callback.message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –î–ï–ú–û-–≤–µ—Ä—Å–∏—é!")

        await session.execute(
            update(UserList).where(UserList.user_id == callback.message.chat.id).values(used_demo=True))
        await session.commit()

    await ManageWireGuardConfig.add_wireguard_config(callback.message, timedelta(days=2))


@router.callback_query(StateFilter(BuyVPNState.choosing_vpn_tariff),F.data.in_(TARIFFS.keys()))
async def receive_tariff(callback: CallbackQuery,state:FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–ø–ª–∞—Ç—ã VPN (–ª—é–±–æ–π —Ç–∞—Ä–∏—Ñ)"""
    title, price = TARIFFS[callback.data]
    await state.set_state(BuyVPNState.waiting_payment)
    await bot.send_invoice(
        chat_id=callback.message.chat.id,
        title="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏",
        description=f"{title}. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª .conf –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã WireGuard.",
        payload=callback.data,
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏", amount=price)],
    )




@router.pre_checkout_query(StateFilter(BuyVPNState.waiting_payment),F.invoice_payload.startswith("new_"))
async def process_pre_checkout_query(pre_checkout_query: PreCheckoutQuery,state:FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ–ø–ª–∞—Ç–æ–π"""
    async with async_session() as session:
        result = await session.execute(select(WgConfList.allowed_ips))
        pull_ip_addresses = result.scalars().all()

    for num in range(2, 254):
        for i in range(2, 254):
            if f"10.8.{num}.{i}" not in pull_ip_addresses:
                await state.set_state(BuyVPNState.success_payment)
                return await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


    await state.clear()
    await bot.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö IP-–∞–¥—Ä–µ—Å–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
